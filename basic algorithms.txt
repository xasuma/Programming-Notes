#1
Reverse a string: this will reverse whatever string I give it. 

function reverseString(str) {
  return str.split("").reverse().join("");
}
reverseString("gorgoro");


_______________________________________________________________________

#2 
Factorialize a Number: //this will get the factorial of whatever number I give it to var i .

function factorialize(num) {
    var result = 1;
    if (num > 0) {
        for (i = 1; i <= num; i++) {
            result *= i;
        }
    } else {
        num = 1;
    }
    return result;
}

factorialize(5);

__________________________________________________________________________

#3
Return true if the given string is a palindrome. Otherwise, return false. (palindrome is a word that reads the same read forward or backwards)


function palindrome(str) {
  var howLong = str.length;
  for(howLong ; howLong > 0 ; howLong--){
    str= str.replace(/(\W|_)/g, "");                                 //         this is \W (remove nonalphanumerical)   AND  _  (remove _)  combined are (\W|_) 
  }
  str = str.toLowerCase();
  
  function reverseString(str) {
  return str.split("").reverse().join("");
  }
 
  if(reverseString(str) == str){
    return true;
  }else{
    return false;
  }
   
}


palindrome("-eye_");


____________________________________________________________________________________

#4
Find the Longest Word in a String


function findLongestWord(str) {
  var array = [];      // each word is an element
  array = str.split(" ");
  var numberOfElements = array.length;  //how many elements
  
  var biggestWord = 0;
  var x= 0;
  
  var arrayValues = [];   //the length of each word is an element
  var arrayValuesElements = arrayValues.length;//how many elements
  
  
  for(var i =0 ; i < (numberOfElements-1) ; i++){
      if(array[i].length > array[i+1].length){
        biggestWord = array[i].length;
        arrayValues.push(biggestWord);
      }else {
        biggestWord = array[i+1].length;
        arrayValues.push(biggestWord);
      }
  }
  
  return Math.max(...arrayValues);   //this will return the max value of the array.

}

findLongestWord("The quick brown fox jumped over the lazy dog");

____________________________________________________________________________________

#5
Title Case a Sentence

function titleCase(str) {
  
  var wordsArray = []; //each word is an element
  wordsArray = str.split(" ");
  var finalString = [];  //this will contain all the elements with the case fixed
  
  for(var i=0;i<wordsArray.length;i++){
    finalString.push(wordsArray[i].charAt(0).toUpperCase() + wordsArray[i].slice(1).toLowerCase());   
  }
  
  var joinme = "";
  joinme = finalString.join(" ");  // joining finalstring[] elements into a string
  return joinme;

}

titleCase("i'm a little tea pot");



___________________________________________________________________________________________

#6
Return Largest Nuimbers in Arrays

function largestOfFour(arr) {
  
  var array = [];
  var biggestNo;
  
  for(var i = 0 ; i < arr.length ; i++){
    array.push(Math.max(...arr[i]));
  }
  
  return array;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);


_____________________________________________________________________________________________

#7
Confirm the ending (Check if a string (first argument, str) ends with the given target string (second argument, target).)

function confirmEnding(str, target) {
  
  x = target.length;
  
  if(target.length === 1){  //if the target is 1 character
    if(target === str.substr(-1)){ //is target = to last character?
      return true;
    }else{
      return false;
    }
  }else{
    if(target === str.substr(-x)){  //is target = to last word? 
      return true;
    }else{
      return false;
    }
  }
}

confirmEnding("Bastian", "n");

_____________________________________________________________________________________________

#8
Repeat a string (Repeat a given string (first argument) num times (second argument). Return an empty string if num is a negative number.)

function repeatStringNumTimes(str, num) {
  var done = [];
  
  for(var i=0; i<num; i++){
    done.push(str);
  }
  
  var finalString = "";
  finalString = done.join("");
  
  return finalString;
}

repeatStringNumTimes("abc", 5);

_____________________________________________________________________________________________

#9
Truncate a string (Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a ... ending.)

function truncateString(str, num) {
  
  if(str.length > num){
    if(num > 2){
      return str.substr(0,(num-3)) + "...";
    }else {
      return str.substr(0,(num)) + "...";
    }   
  }else {
    return str;
  } 
}

truncateString("A-tisket a-tasket A green and yellow basket", 1);

_____________________________________________________________________________________________

#10
Chunky Monkey (Write a function that splits an array (first argument) into groups the length of size (second argument) and returns them as a two-dimensional array.)

function chunkArrayInGroups(arr, size) {
  
  var motherArray = []; //array that will hold all the new mini arrays
  var portion = Math.ceil(arr.length / size);  //how many arrays will there be
  var total = size;
 
  motherArray.push(arr.slice(0,size));  //the first array
  
  for(var i=1; i<portion; i++){         //all the following arrays 
    motherArray.push(arr.slice(size*i,(size*i)+size));
  }
  
  return motherArray;
}

chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2);

_____________________________________________________________________________________________

#11
Slasher Flick (Return the remaining elements of an array after chopping off n elements from the head.)

function slasher(arr, howMany) {
  
  arr.splice(0,howMany);
  return arr;
}

slasher([1, 2, 3], 2);

_____________________________________________________________________________________________

#12
Mutations (Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.)

function mutation(arr) {

  wordOne = arr[0].toLowerCase();
  wordTwo = arr[1].toLowerCase();

  for (i = 0; i < wordTwo.length; i++) {
      if (wordOne.indexOf(wordTwo[i]) >= 0) {   //if you find word1 inside word2 
        console.log(true);
      } else {
        return false;
      }
  }
return true;
}

mutation(['hello', 'hey']);

_____________________________________________________________________________________________

#13
Falsy Bouncer  (Remove all falsy values from an array.)

function bouncer(arr) {

  return arr.filter(Boolean);
}

bouncer([7, "ate", "", false, NaN]);


_____________________________________________________________________________________________

#14
Seek and Destroy (You will be provided with an initial array (the first argument in the destroyer function), 
followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.)

function destroyer(arr) {

 //turns arguments into an array, splices and returns first argument
  var args = Array.prototype.slice.call(arguments);
  args.splice(0, 1);
  
  //indexOf searches arr for items in args, filters out false returns
  return arr.filter(function(element) {
    return args.indexOf(element) === -1;  // -1 if the value searched never occurs
  });
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3, "");

_____________________________________________________________________________________________

#15
Where do I belong
(Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted.)


function getIndexToIns(arr, num) {
  if(arr.indexOf(num) >= 0){  //if num is in arr 
    return arr.sort(function(a,b){return a - b;}).indexOf(num);
  }else{
    return arr.concat(num).sort(function(a,b){return a - b;}).indexOf(num);
  }

}

getIndexToIns([80, 60], 50);

_____________________________________________________________________________________________

#16
Caesars Cipher (Write a function which takes a ROT13 encoded string as input and returns a decoded string.)

function rot13(str) {
  
  var originalNumbers = [];
  
  for(var i =0; i<str.length;i++){ //convert the string into a number and put it in originalNumbers array
    originalNumbers.push(str.charCodeAt(i));
  }
  
  for(var e=0;e<originalNumbers.length;e++){ //this will substract/add 13 to every original letter
    if(originalNumbers[e] >= 65 && originalNumbers[e] <= 77){
      originalNumbers[e]+=13;
    }else if(originalNumbers[e] >= 78 && originalNumbers[e] <= 90){ 
      originalNumbers[e]-=13;
    }else{
      //if there is anything else, do nothing.
    }
  }
  
  var finalStringArr = [];
  
  for(var y=0;y<str.length;y++){ //this will convert the numbers into characters and put them in finalStringArr
    finalStringArr.push(String.fromCharCode(originalNumbers[y]));
  }
  
  var finalString = "";
  finalString = finalStringArr.join("");  //join all the elements into a string
  
  return finalString;
}

// Change the inputs below to test
rot13("LBH QVQ VG!");

_____________________________________________________________________________________________